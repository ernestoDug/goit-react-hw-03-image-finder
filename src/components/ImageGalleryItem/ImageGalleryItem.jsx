import { toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
// npm i react-toastify

import { Component } from 'react';
import { fetchIMG } from '../helpers/fenchIMG';
import Loader from 'components/Loader/Loader';
import Modal from 'components/Modal/Modal';


// import PropTypes from 'prop-types';

import css from './ImageGalleryItem.module.css';

class ImageGalleryItem extends Component {
  state = {
    findImage: [],
    loading: false,
    error: null,
    showMod: false,
  };

  // –≤—ñ–¥–∫—Ä–∏–≤–∞—á –º–æ–¥–∞–ª—É
  modalOpen = ()=>
  {
    this.setState({showMod: true})
  }



  async componentDidUpdate(prevprops, prevState) {
    console.log('prVpr', this.props);
    if (prevprops.searchWord !== this.props.searchWord) {
      //  –≤–º–∏–∫–∞–Ω–Ω—è  –ª–æ–¥–µ—Ä—è...
      this.setState({ loading: true });
// –∑–∞–ø–∏—Ç
      try {
        const respImg = await fetchIMG(this.props.searchWord);
        fetchIMG(this.props.searchWord).then(respImg => {
          // —è–∫—â–æ –ø—Ä–∏–π—à–ª–æ –±–µ–∑ –ø–æ–º–∏–ª–∫–∏
          if (respImg.request.status === 200) {
            this.setState({ findImage: respImg.data.hits });
            // —â–æ –∑–Ω–∞–π—à–ª–∏
            if(respImg.request.status === 200 && respImg.data.hits.length !== 0)
             toast.success(`üêí–ú–∏ –∑–Ω–∞–π—à–ª–∏ ${respImg.data.totalHits} üçå..., —Å–≤—ñ—Ç–ª–∏–Ω üêí`);
          }
          // –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏
          if (respImg.data.hits.length === 0) {
            toast.warn(`üêí –ú–∏ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏ üêí`);
          }
        });
        return respImg;
      } catch (error) {
        // console.log(respImg.statusText,"txt")
        this.setState({ error });
        toast.warn(`üêí–û—Ç–∞–∫–æ—ó! ${error} üêí`);
      } finally {
        // –≤–∏–º–∏–∫–∞–Ω–Ω—è –ª–æ–¥–µ—Ä—è
        this.setState({ loading: false });
      }
      // console.log(respImg, '–≤—ñ–¥–ø–æ–≤—ñ–¥—å');
    }
  }
  
  render() {
    const { findImage, loading } = this.state;
    return (
            <>
        {loading && <Loader />}
        {findImage &&
          findImage.map(({ id, webformatURL, largeImageURL, tags }) => {
                        return (
              <li key={id} className={css.galleryItem}
              onClick ={ ()=>{this.modalOpen()}}
              
              >
                <img
                  className={css.imageGalleryItemImage}
                  src={webformatURL}
                  alt={tags}
                />
              {this.state.showMod && <Modal
              largeImageURL={largeImageURL}
              tag={tags}
            
              
              /> 

                 }
              </li>
              );
          })}
      </>
    );
  }
}

export default ImageGalleryItem;
